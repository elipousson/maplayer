% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_frame.R
\name{layer_frame}
\alias{layer_frame}
\alias{make_frame}
\title{Create a frame layer around a simple feature object}
\usage{
layer_frame(
  data,
  dist = NULL,
  diag_ratio = NULL,
  unit = "meter",
  asp = NULL,
  style = "circle",
  scale = 1,
  rotate = 0,
  inscribed = FALSE,
  color = "black",
  size = 1,
  linetype = "solid",
  fill = "white",
  neatline = TRUE,
  expand = TRUE,
  basemap = FALSE,
  union = TRUE,
  ...
)

make_frame(
  x,
  dist = NULL,
  diag_ratio = NULL,
  unit = "meter",
  asp = NULL,
  style = "circle",
  scale = 1,
  rotate = 0,
  inscribed = FALSE,
  dTolerance = 0,
  union = TRUE
)
}
\arguments{
\item{data}{A sf object to create the frame around.}

\item{dist}{buffer distance in units. Optional.}

\item{diag_ratio}{ratio of diagonal distance of area's bounding box used as
buffer distance. e.g. if the diagonal distance is 3000 meters and the
"diag_ratio = 0.1"  a 300 meter will be used. Ignored when \code{dist} is
provided.}

\item{unit}{Units for buffer. Supported options include "meter", "foot",
"kilometer", and "mile", "nautical mile" Common abbreviations (e.g. "km"
instead of "kilometer") are also supported. Distance in units is converted
to units matching GDAL units for x; defaults to "meter"}

\item{asp}{Aspect ratio of width to height as a numeric value (e.g. 0.33) or
character (e.g. "1:3"). If numeric, \code{\link[sfext:get_asp]{get_asp()}} returns the same value
without modification.}

\item{style}{Style of framing shape to add, "circle", "square", "rect",
"buffer", or "none". If style is "buffer", the asp parameter is ignored. If
style is "none", the dist, diag_ratio, and asp parameters are ignored and
the input data is used as the frame.}

\item{scale}{numeric; scale factor, Default: 1}

\item{rotate}{numeric; degrees to rotate (-360 to 360), Default: 0}

\item{inscribed}{If \code{TRUE}, make circle or square inscribed within x, if
\code{FALSE}, make it circumscribed.}

\item{fill, color, size, linetype}{Fixed aesthetics for frame, passed to
\link{layer_location_data}.}

\item{neatline}{If \code{TRUE}, return a list of layers that includes a
\link{layer_neatline}}

\item{expand}{If \code{TRUE}, the default, adds a small expansion factor to
the limits to ensure that data and axes don't overlap. If \code{FALSE},
limits are taken exactly from the data or \code{xlim}/\code{ylim}.}

\item{union}{If \code{TRUE}, pass data to \link[sf:geos_combine]{sf::st_union} before buffering and
creating frame; defaults to \code{TRUE}.}

\item{...}{
  Arguments passed on to \code{\link[=layer_location_data]{layer_location_data}}
  \describe{
    \item{\code{layer_fn}}{ggplot2 geom or custom function using lambda syntax. Use for
passing custom mapping functions to layer_location_data beyond the
supported geom options.}
    \item{\code{label_col}}{Column name or id for a column with the text or labels to
pass to any text geom.}
    \item{\code{smooth_params}}{Optional. Logical or a list of parameters passed to
\code{\link[smoothr:smooth]{smoothr::smooth()}}. If \code{TRUE}, apply \code{\link[smoothr:smooth]{smoothr::smooth()}} to location data
using default parameters. smooth_params is ignored if data is \code{NULL}
(inheriting data from ggplot).}
    \item{\code{shadow_params}}{Optional. Logical or a list of parameters passed to
\code{\link[ggfx:with_shadow]{ggfx::with_shadow()}}. If \code{TRUE}, apply \code{\link[ggfx:with_shadow]{ggfx::with_shadow()}} to the layer
using default parameters. shadow_params is ignored if layer_fn is provided.}
    \item{\code{location}}{sf object. If multiple areas are provided, they are unioned
into a single sf object using \link[sf:geos_combine]{sf::st_union}}
    \item{\code{filetype}}{File type to use if passing parameters to \link[sfext:read_sf_ext]{sfext::read_sf_download}
or \link[sfext:read_sf_ext]{sfext::read_sf_pkg} (required for extdata and cached data).}
    \item{\code{fn}}{Function to apply to data after filtering by location but before
returning from function.}
    \item{\code{crop}}{If \code{TRUE}, x is cropped to y using \code{\link[sf:st_crop]{sf::st_crop()}}.}
    \item{\code{trim}}{If \code{TRUE}, x is trimmed to y with \code{\link[sfext:st_trim]{st_trim()}}.}
    \item{\code{crs}}{Coordinate reference system to return.}
    \item{\code{mapping}}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}} or
\code{\link[ggplot2:aes_]{aes_()}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}
  }}

\item{x}{A sf, sfc, or bbox object}

\item{dTolerance}{numeric; tolerance parameter, specified for all or for each
feature geometry. If you run \code{st_simplify}, the input data is
specified with long-lat coordinates and \code{sf_use_s2()} returns
\code{TRUE}, then the value of \code{dTolerance} must be specified in
meters.}
}
\description{
Create a circle or square that can be used as a frame around a simple feature
object using fixed aesthetics for fill, color, size, and linetype. This
function is helpful for the background of an inset map intended for use with
\link{layer_inset}.
}
\details{
The \link{make_frame} helper function calls \link[sfext:st_misc]{sfext::st_circle} (if \code{style = "circle"}), \link[sfext:st_misc]{sfext::st_square}  (if \code{style = "square"}), \link[sfext:st_bbox_ext]{sfext::st_bbox_ext}
(if \code{style = "rect"}), or \link[sfext:st_buffer_ext]{sfext::st_buffer_ext} (if \code{style = "none"}).

If neatline is \code{TRUE}, \link{layer_frame} returns a list of two geoms, the second
a \link{layer_neatline} layer created using the frame object as the data and the
parameters \code{bgcolor = "none"} and \code{color = "none"}. asp is set to 1 if style is
"circle" or "square" or the provided asp value otherwise.

Additional parameters passed through ... can include additional fixed
aesthetics (e.g. alpha). If using the fn parameter, the function is applied
to the frame simple feature object created by \link{make_frame} (not to the
original input data).
}
\examples{
nc <- sfext::read_sf_path(system.file("shape/nc.shp", package = "sf"))

raleigh_msa <-
  getdata::get_location(
    type = nc,
    name_col = "NAME",
    name =  c("Franklin", "Johnston", "Wake"),
    crs = 3857
    )

ggplot() +
  layer_frame(
    data = raleigh_msa,
    frame = "circle",
    fill = "lightyellow",
    inscribed = FALSE
  ) +
  layer_location_data(
    data = raleigh_msa,
    mapping = aes(fill = NAME),
    alpha = 0.5
  ) +
  ggplot2::guides(
    fill = "none"
  )
}
\seealso{
Other layer: 
\code{\link{layer_location_data}()},
\code{\link{layer_neatline}()},
\code{\link{layer_scaled}()}
}
\concept{layer}
