% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/labs_ext.R
\name{labs_ext}
\alias{labs_ext}
\title{Add labels to a ggplot2 plot or map}
\usage{
labs_ext(
  ...,
  title = ggplot2::waiver(),
  subtitle = ggplot2::waiver(),
  caption = ggplot2::waiver(),
  tag = ggplot2::waiver(),
  alt = ggplot2::waiver(),
  alt_insight = ggplot2::waiver(),
  source_note = NULL,
  source_sep = ". ",
  source_before = "Source: ",
  source_end = ".",
  .sep = "",
  .envir = parent.frame(),
  .open = "{",
  .close = "}",
  .na = "NA",
  .null = character(),
  .comment = "#",
  .literal = FALSE,
  .transformer = identity_transformer,
  .trim = TRUE
)
}
\arguments{
\item{...}{
  Arguments passed on to \code{\link[ggplot2:labs]{ggplot2::labs}}
  \describe{
    \item{\code{alt,alt_insight}}{Text used for the generation of alt-text for the plot.
See \link[ggplot2]{get_alt_text} for examples.}
  }}

\item{title}{The text for the title.}

\item{subtitle}{The text for the subtitle for the plot which will be
displayed below the title.}

\item{caption}{The text for the caption which will be displayed in the
bottom-right of the plot by default.}

\item{tag}{The text for the tag label which will be displayed at the
top-left of the plot by default.}

\item{alt, alt_insight}{Text used for the generation of alt-text for the plot.
See \link[ggplot2]{get_alt_text} for examples.}

\item{source_note}{Data source(s) to append to caption or use as caption (if
no caption is supplied). Also supports glue string interpolation.}

\item{source_sep, source_before, source_end}{Strings used to separate caption
(if supplied) and source note, add before the source note, and add after
the source note.}

\item{.sep}{[\code{character(1)}: \sQuote{""}]\cr Separator used to separate elements.}

\item{.envir}{[\code{environment}: \code{parent.frame()}]\cr Environment to evaluate each expression in. Expressions are
evaluated from left to right. If \code{.x} is an environment, the expressions are
evaluated in that environment and \code{.envir} is ignored. If \code{NULL} is passed, it is equivalent to \code{\link[=emptyenv]{emptyenv()}}.}

\item{.open}{[\code{character(1)}: \sQuote{\\\{}]\cr The opening delimiter. Doubling the
full delimiter escapes it.}

\item{.close}{[\code{character(1)}: \sQuote{\\\}}]\cr The closing delimiter. Doubling the
full delimiter escapes it.}

\item{.na}{[\code{character(1)}: \sQuote{NA}]\cr Value to replace \code{NA} values
with. If \code{NULL} missing values are propagated, that is an \code{NA} result will
cause \code{NA} output. Otherwise the value is replaced by the value of \code{.na}.}

\item{.null}{[\code{character(1)}: \sQuote{character()}]\cr Value to replace
NULL values with. If \code{character()} whole output is \code{character()}. If
\code{NULL} all NULL values are dropped (as in \code{paste0()}). Otherwise the
value is replaced by the value of \code{.null}.}

\item{.comment}{[\code{character(1)}: \sQuote{#}]\cr Value to use as the comment
character.}

\item{.literal}{[\code{boolean(1)}: \sQuote{FALSE}]\cr Whether to treat single or
double quotes, backticks, and comments as regular characters (vs. as
syntactic elements), when parsing the expression string. Setting \code{.literal = TRUE} probably only makes sense in combination with a custom
\code{.transformer}, as is the case with \code{glue_col()}. Regard this argument
(especially, its name) as experimental.}

\item{.transformer}{[\verb{function]}\cr A function taking two arguments, \code{text}
and \code{envir}, where \code{text} is the unparsed string inside the glue block and
\code{envir} is the execution environment. A \code{.transformer} lets you modify a
glue block before, during, or after evaluation, allowing you to create your
own custom \code{glue()}-like functions. See \code{vignette("transformers")} for
examples.}

\item{.trim}{[\code{logical(1)}: \sQuote{TRUE}]\cr Whether to trim the input
template with \code{\link[glue:trim]{trim()}} or not.}
}
\description{
A helper function that converts strings to glue strings for the title,
subtitle, and caption.
}
