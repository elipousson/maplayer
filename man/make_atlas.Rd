% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_atlas.R
\name{make_atlas}
\alias{make_atlas}
\title{Convert a set of ggplot2 maps to an atlas}
\usage{
make_atlas(
  plots,
  dims = NULL,
  ncol = NULL,
  nrow = NULL,
  page = "letter",
  orientation = "portrait",
  save = FALSE,
  filename = NULL,
  ...
)
}
\arguments{
\item{plots}{A list of ggplot2 maps to assemble into a set of sheet maps in
an atlas format.}

\item{dims}{Optional. Plot dimensions. Ignored if ncol and nrow are supplied.
Otherwise, if \code{NULL} (default), dims are inferred based on the dimensions
of the first plot in plots.}

\item{ncol, nrow}{The dimensions of the grid to create.  If both are \code{NULL},
dims will be used or dims will be determined based on the plot dimensions.}

\item{page}{Used by \code{\link[papersize:get_page_dims]{get_page_dims()}}, page is either a character vector
passed to the name parameter of \code{\link[papersize:get_page_size]{get_page_size()}}, a data.frame with column
names matching the cols parameter, or a length 2 numeric vector with the
page width and height.}

\item{orientation}{Page orientation, Default: \code{NULL}. Supported options are
"portrait", "landscape", or "square".}

\item{save}{If \code{TRUE}, save atlas plots to files using
\code{\link[papersize:ggsave_ext]{papersize::map_ggsave_ext()}} Default: FALSE}

\item{filename}{File name to create on disk.}

\item{...}{
  Arguments passed on to \code{\link[papersize:ggsave_ext]{papersize::map_ggsave_ext}}
  \describe{
    \item{\code{name}}{Plot name, used to create filename (if filename is \code{NULL}) using
\code{\link[filenamr:make_filename]{filenamr::make_filename()}}}
    \item{\code{label}}{Label to combine with name converted to snake case with
\code{\link[janitor:make_clean_names]{janitor::make_clean_names()}}. The label is designed to identify the area
or other shared characteristics across multiple data files, maps, or plots.
label is ignored if name is NULL or if name includes a file extension.}
    \item{\code{prefix}}{File name prefix. "date" adds a date prefix, "time" adds a
date/time prefix; defaults to \code{NULL}.}
    \item{\code{postfix}}{File name postfix; defaults to \code{NULL}.}
    \item{\code{device}}{Device to use. Can either be a device function
(e.g. \link{png}), or one of "eps", "ps", "tex" (pictex),
"pdf", "jpeg", "tiff", "png", "bmp", "svg" or "wmf" (windows only).}
    \item{\code{fileext}}{File type or extension. Optional if filename or path include a
file extension.}
    \item{\code{filetype}}{File type (used if fileext is \code{NULL}).}
    \item{\code{path}}{Path of the directory to save plot to: \code{path} and \code{filename}
are combined to create the fully qualified file name. Defaults to the
working directory.}
    \item{\code{overwrite}}{If \code{TRUE} (default), overwrite any existing file with the
same name or ask to overwrite if \code{ask = TRUE}. Passed to
\code{\link[filenamr:check_file_overwrite]{filenamr::check_file_overwrite()}}.}
    \item{\code{single_file,onefile}}{If \code{TRUE}, use \code{\link[gridExtra:arrangeGrob]{gridExtra::arrangeGrob()}} to create an
arrangelist class object that \code{\link[ggplot2:ggsave]{ggplot2::ggsave()}} can save as a single
multi-page file. Note: this does not work with plots modified with
patchwork including inset maps created with the
\code{\link[maplayer:layer_inset]{maplayer::layer_inset()}} function.}
  }}
}
\value{
OUTPUT_DESCRIPTION
}
\description{
\code{\link[=make_atlas]{make_atlas()}} is a wrapper for \code{\link[papersize:page_layout]{papersize::page_layout()}} and
\code{\link[papersize:ggsave_ext]{papersize::map_ggsave_ext()}} with the intent for taking a list of maps into
a set of patchwork plots and optionally save plots to file. The function is
similar to \code{\link[papersize:make_contact_sheets]{papersize::make_contact_sheets()}}.
}
\details{
DETAILS
}
\examples{
nc <- sf::read_sf(system.file("shape/nc.shp", package = "sf"))

plots <- lapply(
  dplyr::nest_by(nc, .by = NAME)[["data"]][1:4],
  function(x) {
    make_location_map(
      basemap = ggplot(),
      layer = layer_location(
        data = x,
        fill = "yellow",
        alpha = 0.5
      ),
      bg_layer = layer_location_data(
        data = nc,
        location = x,
        asp = 8.5 / 5.5,
        crop = FALSE
      ),
      neatline = layer_neatline(data = x, asp = 8.5 / 5.5),
      addon = labs_ext(caption = x$NAME)
    )
  }
)

make_atlas(
  plots = plots,
  page = "letter",
  nrow = 2,
  ncol = 1,
  save = FALSE
)
}
\keyword{internal}
